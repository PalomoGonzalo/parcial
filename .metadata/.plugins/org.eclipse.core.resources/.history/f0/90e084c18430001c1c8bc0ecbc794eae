/*
 * informes.c
 *
 *  Created on: 18 oct. 2021
 *      Author: mati_
 */

#include "informes.h"


int verCantidadDeSalonHay(Arcade lista_arcade[],int len_arcade, Salon lista_salon[],int len_salon)
{
	int retorno=-1;
	for (int i=0;i<len_arcade;i++)
		{
			for (int j=0;j<len_salon;j++)
			{
				if(lista_arcade[i].flagEmpty==OCUPADO&&lista_salon[j].flagEmpty==OCUPADO)
				{
					if(lista_arcade[i].idSalon==lista_salon[j].id)
					{
						lista_salon[j].cantidadDeJuegos++;
						retorno=0;
					}
				}
			}
		}
	return retorno;
}

void informe_arcadeMasDeCuatro(Salon lista [],int len_salon,Arcade lista_arcade[],int len_arcade)
{
    int i;
    char auxTipo[38];
    printf("\nid:\t     nombre:\t   direccion:\t  tipo:\t     cantidad de juego:\t");
    verCantidadDeSalonHay(lista_arcade, len_arcade, lista, len_salon);
    for(i=0; i<len_salon; i++)
    {
        if(lista[i].flagEmpty==OCUPADO)
        {
        	if(lista[i].cantidadDeJuegos>4)
        	{
        		salon_reemplazarTipo(lista[i].tipo, auxTipo, sizeof(auxTipo));
        		printf("\n%2d\t%10s\t%10s\t%10s\t%2d\t",lista[i].id,lista[i].nombre,lista[i].direccion,auxTipo,lista[i].cantidadDeJuegos);
        	}


        }
    }

}
void informe_arcadeDosJugadores(Arcade lista[],int len_arcade,Salon lista_salon[],int len_salon)
{
		int i;
	    int indice;

	    printf("\n\nid:\tCtd Jugadores :\t nombre del juego:\tnombre del salon:");
	    for(i=0; i<len_arcade; i++)
	    {

	    	salon_buscarId(lista_salon, len_salon, lista[i].idSalon,&indice);
				if(lista[i].flagEmpty==OCUPADO)
				{
					if(lista[i].cantidadDeJugadores>2)
					{

						printf("\n%d\t%10d\t%10s\t%15s\t",lista[i].id,lista[i].cantidadDeJugadores,lista[i].nombreJuego,lista_salon[indice].nombre);
					}
				}
	    }
}
int informe_salonPorId(Salon lista_salon[],int len_salon,Arcade lista_arcade[], int len_arcade)
{
	int retorno=-1;
	int idAux;
	int opcion;
	int indice;
	utn_getInt(&idAux, "\ningrese el id a buscar\n", "error ingrese un numero valido\n", 1, len_salon, 5);
	opcion=salon_buscarId(lista_salon, len_salon, idAux, &indice);
	verCantidadDeSalonHay(lista_arcade, len_arcade, lista_salon, len_salon);
	if(opcion==0)
	{
		salon_mostrarUno(lista_salon, indice);
		retorno=0;
	}
	else
		printf("no existe el id ingresado\n");

	return retorno;

}
void informe_listarArcadePorId(Arcade lista_arcade[],int len_arcade,Salon lista_salon[],int len_salon,int posicionId)
 {
	int i;
	char auxTipo[32];
	int ContArcadeNoExiste=0;
	printf("\n Este salon contiene estos arcades:\n");
	printf("\n\nid:\tnacionalidad:\tipo de sonido:\tcant jugad:\tfichas maximas:\tnombre del juego:");
	for (i = 0; i < len_arcade; i++)
	{
		if (lista_arcade[i].flagEmpty == OCUPADO)
		{
			if (lista_arcade[i].idSalon == lista_salon[posicionId].id)
			{
				arcade_reemplazarTipo(lista_arcade[i].tipoDeSonido, auxTipo,sizeof(auxTipo));
				printf("\n%d\t%10s\t%10s\t%10d\t%10d\t%10s\t",lista_arcade[i].id, lista_arcade[i].nacionalidad,auxTipo, lista_arcade[i].cantidadDeJugadores,lista_arcade[i].capacidadMaxFicha,lista_arcade[i].nombreJuego);
				ContArcadeNoExiste++;
			}
		}
	}
	if(ContArcadeNoExiste==0)
	{
		printf("\n Este salon no tiene ningun arcade cargado \n");
	}

}
void informe_imprimirArcadePorId(Arcade lista_arcade[],int len_arcade, Salon lista_salon[],int len_salon)
{
	int idSalon;
	int posicionIdSalon;
	utn_getInt(&idSalon, "\ningrese el id de salon para buscar los arcades \n","error reingrese \n", 1, len_salon, 7);
	if (salon_buscarId(lista_salon, len_salon, idSalon, &posicionIdSalon)== 0)
	{
		informe_listarUnSoloSalonPoirId(lista_salon, posicionIdSalon);
		informe_listarArcadePorId(lista_arcade, len_arcade, lista_salon,len_salon, posicionIdSalon);
	}
	else
		printf("El id no existe reeingrese \n");



}

void informe_listarUnSoloSalonPoirId(Salon lista[],int indice)
{
	char auxTipo[32];
	salon_reemplazarTipo(lista[indice].tipo, auxTipo, sizeof(auxTipo));
	printf("NOMBRE: %s TIPO DE SALON: %s\n",lista[indice].nombre,auxTipo);


}
void informe_Max(Salon lista_salon[], int len_salon, Arcade lista_arcade[], int len_arcade)
{
	verCantidadDeSalonHay(lista_arcade, len_arcade, lista_salon, len_salon);
	int indiceMax;
	indiceMax=maxSalon(lista_salon, len_salon);
	printf("El salon con mas cantidad es:\n");
	salon_mostrarUno(lista_salon, indiceMax);
	informe_listarArcadePorId(lista_arcade, len_arcade, lista_salon, len_salon, indiceMax);




}
int maxSalon(Salon lista_salon[],int len_salon)
{
	int max;
	int i=0;
	int indice=0;
	max=lista_salon[i].cantidadDeJuegos;
	for(i=1;i<len_salon;i++)
	{
	   if (lista_salon[i].cantidadDeJuegos > max)
	      {
		   max = lista_salon[i].cantidadDeJuegos;
		   indice=i;
	      }
	}
	 return indice;
}

int acumuladorDeFichas(Arcade lista_arcade[],int len_arcade,Salon lista_salon[], int len_salon,int indiceId)
{
	int acumulador=0;
	for(int i=0;i<len_arcade;i++)
	{
		if(lista_arcade[i].flagEmpty==OCUPADO)
		{
			if(lista_arcade[i].idSalon==lista_salon[indiceId].id)
			{
				acumulador=acumulador+lista_arcade[i].capacidadMaxFicha;
			}
		}
	}
	return acumulador;

}
float informe_recaudarPorFicha(Arcade lista_arcade[],int len_arcade,Salon lista_salon[], int len_salon)
{
	int acumulador=0;
	int indiceId;
	int id;
	float precio;
	float resultado;
	utn_getInt(&id, "\ningrese el id de salon para calcular el monto maximo que se puede generar \n", "error reingrese \n", 1, len_salon, 7);

	if(salon_buscarId(lista_salon, len_salon, id, &indiceId)==0)
		{
		salon_mostrarUno(lista_salon, indiceId);
		utn_getFloat(&precio, "\ningrese el id de salon para calcular el monto maximo que se puede generar \n", "error reingrese \n", 1, 99999, 7);
		acumulador=acumuladorDeFichas(lista_arcade, len_arcade, lista_salon, len_salon, indiceId);
		resultado=(float)acumulador*precio;
		}
	else
		printf("el id no existe\n");

	printf("\n ESTE SALON PUEDE RECAUDAR: %0.2f\n",resultado);
	return resultado;

}
int informe_juegoContadorArcade(Arcade list[],int len_arcade, char juego[],int *contador)
{
	int indice=-1;
	int i;
	for (i=0;i<len_arcade;i++)
	{
		if(list[i].flagEmpty==OCUPADO)
		{
			if(strnicmp(list[i].nombreJuego,juego,32)==0)
			{
				indice=0;
				contador++;
			}
		}
	}
	return indice ;
}


void informe_imprimirContadorArcadePorJuego(Listajuegos lista_juegos[],len_salon, Arcade lista_arcade[], len_arcade)
{
	char juego[32];
	int cantidadDeJuegos;
	generListaJuegos(lista_juegos, len_salon, lista_arcade, len_arcade);
	getString("INGRESE NOMBRE DEL JUEGO PARA BUSCAR LA CANTIDAD QUE TIENE DE ARCADE \n", juego);
	if(informe_juegoContadorArcade(lista_arcade, len_arcade, juego,&cantidadDeJuegos)==0)
	{
		printf("ESTE JUEGO LO CONTIENEN %d DE ARCADES\n", cantidadDeJuegos);

	}
	else
		printf("el juego no existe\n");

}








